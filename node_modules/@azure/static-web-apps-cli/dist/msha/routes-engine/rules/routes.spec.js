"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock("../../../core/utils/logger", () => {
    return {
        logger: {
            silly: () => { },
        },
    };
});
jest.mock("../../../core/constants", () => {
    return {
        SWA_CLI_OUTPUT_LOCATION: "/",
        SWA_CLI_APP_PROTOCOL: "http",
        IS_APP_DEV_SERVER: () => false,
        ALLOWED_HTTP_METHODS_FOR_STATIC_CONTENT: ["GET", "OPTIONS", "HEAD"],
        AUTH_STATUS: {
            NoAuth: 0,
        },
    };
});
const mock_fs_1 = __importDefault(require("mock-fs"));
const routes_1 = require("./routes");
const routeModule = __importStar(require("../route-processor"));
const cookieModule = __importStar(require("../../../core/utils/cookie"));
describe("route", () => {
    describe("tryFindFileForRequest()", () => {
        beforeEach(() => { });
        afterEach(() => {
            mock_fs_1.default.restore();
        });
        it("should return NULL when file doesn't exist", () => {
            mock_fs_1.default({
                "/bar.txt": "",
            });
            const filePath = routes_1.tryFindFileForRequest("foo.png");
            expect(filePath).toBe(null);
        });
        it("should return file path when file exists", () => {
            mock_fs_1.default({
                "/foo.png": "",
            });
            const filePath = routes_1.tryFindFileForRequest("foo.png");
            expect(filePath).toBe("foo.png");
        });
        it("should return file path when file (without extension) exists", () => {
            mock_fs_1.default({
                "/foo": "",
            });
            const filePath = routes_1.tryFindFileForRequest("foo");
            expect(filePath).toBe("foo");
        });
        it("should return NULL when file (without extension) doesn't exist", () => {
            mock_fs_1.default({
                "/foo.txt": "",
            });
            const filePath = routes_1.tryFindFileForRequest("foo");
            expect(filePath).toBe(null);
        });
        it("should return file path when file (w/ space) exists", () => {
            mock_fs_1.default({
                "/foo bar.png": "",
            });
            const filePath = routes_1.tryFindFileForRequest("foo bar.png");
            expect(filePath).toBe("foo bar.png");
        });
        it("should return file path when file (w/ percent-encoded symbols) exists", () => {
            mock_fs_1.default({
                "/with space.html": "",
            });
            const filePath = routes_1.tryFindFileForRequest("with%20space.html");
            expect(filePath).toBe("with space.html");
        });
        it("should return file path when file exists in subfolder", () => {
            mock_fs_1.default({
                "/foo/bar.png": "",
            });
            const filePath = routes_1.tryFindFileForRequest("foo/bar.png");
            expect(filePath).toBe("foo/bar.png");
        });
        it("should return file path when file exists in subfolder (w/ percent-encoded symbols)", () => {
            mock_fs_1.default({
                "/with space/index.html": "",
            });
            const filePath = routes_1.tryFindFileForRequest("with%20space/index.html");
            expect(filePath).toBe("with space/index.html");
        });
        it("should return null when index.html does not exist", () => {
            mock_fs_1.default({
                "/foo": {
                    "foo.html": "",
                },
            });
            const filePath = routes_1.tryFindFileForRequest("/foo/");
            expect(filePath).toBe(null);
        });
        it("should return index.html when folder is provided", () => {
            mock_fs_1.default({
                "/foo": {
                    "index.html": "",
                },
            });
            const filePath = routes_1.tryFindFileForRequest("/foo/");
            expect(filePath).toBe("/foo/index.html");
        });
    });
    describe("isRouteRequiringUserRolesCheck()", () => {
        const req = {};
        const routeDef = {};
        let spyDecodeCookie;
        beforeEach(() => {
            spyDecodeCookie = jest.spyOn(cookieModule, "decodeCookie");
        });
        it("should not require user roles check when route rule is undefined", () => {
            const checkStatus = routes_1.isRouteRequiringUserRolesCheck(req, undefined, false, 0);
            expect(checkStatus).toBe(true);
        });
        it("should not require user roles check when no route rule is provided", () => {
            const checkStatus = routes_1.isRouteRequiringUserRolesCheck(req, routeDef, false, 0);
            expect(checkStatus).toBe(true);
        });
        it("should not require user roles check when allowedRoles is empty", () => {
            routeDef.allowedRoles = [];
            const checkStatus = routes_1.isRouteRequiringUserRolesCheck(req, routeDef, false, 0);
            expect(checkStatus).toBe(true);
        });
        it("should not lookup auth cookie when when allowedRoles has anonymous role", () => {
            routeDef.allowedRoles = ["anonymous"];
            const checkStatus = routes_1.isRouteRequiringUserRolesCheck(req, routeDef, false, 0);
            expect(checkStatus).toBe(true);
        });
        describe("when 'allowedRoles' has valid role", () => {
            it("should return false when no headers are set", () => {
                routeDef.allowedRoles = ["admin"];
                req.headers = undefined;
                const checkStatus = routes_1.isRouteRequiringUserRolesCheck(req, routeDef, false, 0);
                expect(spyDecodeCookie).not.toHaveBeenCalled();
                expect(checkStatus).toBe(false);
            });
            it("should return false when no cookies are set in headers", () => {
                routeDef.allowedRoles = ["admin"];
                req.headers = {
                    cookie: undefined,
                };
                const checkStatus = routes_1.isRouteRequiringUserRolesCheck(req, routeDef, true, 0);
                expect(spyDecodeCookie).not.toHaveBeenCalled();
                expect(checkStatus).toBe(false);
            });
            it("should return false when no StaticWebAppsAuthCookie cookie is set in headers.cookie", () => {
                routeDef.allowedRoles = ["admin"];
                req.headers = {
                    cookie: "foo=bar",
                };
                spyDecodeCookie.mockReturnValue(null);
                const checkStatus = routes_1.isRouteRequiringUserRolesCheck(req, routeDef, true, 0);
                expect(spyDecodeCookie).toHaveBeenCalledWith("foo=bar");
                expect(checkStatus).toBe(false);
            });
            it("should return false when StaticWebAppsAuthCookie cookie is set but has invalid ClientPrincipal", () => {
                routeDef.allowedRoles = ["admin"];
                req.headers = {
                    cookie: "StaticWebAppsAuthCookie=bar",
                };
                spyDecodeCookie.mockReturnValue("bar");
                const checkStatus = routes_1.isRouteRequiringUserRolesCheck(req, routeDef, true, 0);
                expect(spyDecodeCookie).toHaveBeenCalledWith("StaticWebAppsAuthCookie=bar");
                expect(checkStatus).toBe(false);
            });
            it("should return true when StaticWebAppsAuthCookie cookie is set and has valid ClientPrincipal", () => {
                const clientPrincipal = {
                    identityProvider: "foo",
                    userId: "foo",
                    userDetails: "foo",
                    userRoles: ["admin"],
                };
                const clientPrincipalBase64 = btoa(JSON.stringify(clientPrincipal));
                routeDef.allowedRoles = ["admin"];
                req.headers = {
                    cookie: `StaticWebAppsAuthCookie=${clientPrincipalBase64}`,
                };
                spyDecodeCookie.mockReturnValue(clientPrincipal);
                const checkStatus = routes_1.isRouteRequiringUserRolesCheck(req, routeDef, true, 0);
                expect(spyDecodeCookie).toHaveBeenCalledWith(`StaticWebAppsAuthCookie=${clientPrincipalBase64}`);
                expect(checkStatus).toBe(true);
            });
            it("should return false when StaticWebAppsAuthCookie cookie is set but roles do not match", () => {
                const clientPrincipal = {
                    identityProvider: "foo",
                    userId: "foo",
                    userDetails: "foo",
                    userRoles: ["foo"],
                };
                const clientPrincipalBase64 = btoa(JSON.stringify(clientPrincipal));
                routeDef.allowedRoles = ["admin"];
                req.headers = {
                    cookie: `StaticWebAppsAuthCookie=${clientPrincipalBase64}`,
                };
                spyDecodeCookie.mockReturnValue(clientPrincipal);
                const checkStatus = routes_1.isRouteRequiringUserRolesCheck(req, routeDef, true, 0);
                expect(spyDecodeCookie).toHaveBeenCalledWith(`StaticWebAppsAuthCookie=${clientPrincipalBase64}`);
                expect(checkStatus).toBe(false);
            });
        });
    });
    // note: we are testing non-legacy (old) config only!
    describe("tryGetMatchingRoute() - isLegacyConfigFile = false", () => {
        const req = {
            url: "/",
            headers: {
                host: "0.0.0.0",
            },
        };
        const userConfig = {
            isLegacyConfigFile: false,
            routes: [
                {
                    route: "/",
                },
            ],
        };
        let spyDoesRequestPathMatchRoute;
        let spyDoesRequestPathMatchLegacyRoute;
        beforeEach(() => {
            spyDoesRequestPathMatchRoute = jest.spyOn(routeModule, "doesRequestPathMatchRoute");
            spyDoesRequestPathMatchLegacyRoute = jest.spyOn(routeModule, "doesRequestPathMatchLegacyRoute");
        });
        it("should return undefined when no route provided", () => {
            userConfig.routes = [];
            spyDoesRequestPathMatchRoute.mockReturnValue(false);
            spyDoesRequestPathMatchLegacyRoute.mockReturnValue(false);
            const matchedRoute = routes_1.tryGetMatchingRoute(req, userConfig);
            expect(matchedRoute).toBe(undefined);
        });
        it("should return undefined when routes is undefined", () => {
            delete userConfig.routes;
            spyDoesRequestPathMatchRoute.mockReturnValue(false);
            spyDoesRequestPathMatchLegacyRoute.mockReturnValue(false);
            const matchedRoute = routes_1.tryGetMatchingRoute(req, userConfig);
            expect(matchedRoute).toBe(undefined);
        });
        it("should return undefined when a route is invalid", () => {
            userConfig.routes = [
                {
                    route: "",
                },
            ];
            spyDoesRequestPathMatchRoute.mockReturnValue(false);
            spyDoesRequestPathMatchLegacyRoute.mockReturnValue(false);
            const matchedRoute = routes_1.tryGetMatchingRoute(req, userConfig);
            expect(matchedRoute).toBe(undefined);
        });
        it("should return route rule when route is matched", () => {
            req.url = "/foo";
            userConfig.routes = [{ route: "/foo" }];
            spyDoesRequestPathMatchRoute.mockReturnValue(true);
            spyDoesRequestPathMatchLegacyRoute.mockReturnValue(false);
            const matchedRoute = routes_1.tryGetMatchingRoute(req, userConfig);
            expect(matchedRoute).toEqual({ route: "/foo" });
        });
        it("should return undefined when route is not matched", () => {
            req.url = "/foo";
            userConfig.routes = [{ route: "/bar" }];
            spyDoesRequestPathMatchRoute.mockReturnValue(false);
            spyDoesRequestPathMatchLegacyRoute.mockReturnValue(false);
            const matchedRoute = routes_1.tryGetMatchingRoute(req, userConfig);
            expect(matchedRoute).toBe(undefined);
        });
        it("should return route rule when route is file and is matched", () => {
            req.url = "/foo.txt";
            userConfig.routes = [{ route: "/foo.txt" }];
            spyDoesRequestPathMatchRoute.mockReturnValue(true);
            spyDoesRequestPathMatchLegacyRoute.mockReturnValue(false);
            const matchedRoute = routes_1.tryGetMatchingRoute(req, userConfig);
            expect(matchedRoute).toEqual({ route: "/foo.txt" });
        });
        it("should return undefined when route is file and is not matched", () => {
            req.url = "/foo.txt";
            userConfig.routes = [{ route: "/foo.jpg" }];
            spyDoesRequestPathMatchRoute.mockReturnValue(false);
            spyDoesRequestPathMatchLegacyRoute.mockReturnValue(false);
            const matchedRoute = routes_1.tryGetMatchingRoute(req, userConfig);
            expect(matchedRoute).toBe(undefined);
        });
        it("should return rule when route with redirect is matched", () => {
            req.url = "/foo";
            userConfig.routes = [{ route: "/foo", redirect: "/bar" }];
            spyDoesRequestPathMatchRoute.mockReturnValue(true);
            spyDoesRequestPathMatchLegacyRoute.mockReturnValue(false);
            const matchedRoute = routes_1.tryGetMatchingRoute(req, userConfig);
            expect(matchedRoute).toEqual({ route: "/foo", redirect: "http://0.0.0.0/bar" });
        });
        it("should return undefined when redirection loop is detected", () => {
            req.url = "/foo";
            userConfig.routes = [{ route: "/foo", redirect: "/foo" }];
            spyDoesRequestPathMatchRoute.mockReturnValue(false);
            spyDoesRequestPathMatchLegacyRoute.mockReturnValue(false);
            const matchedRoute = routes_1.tryGetMatchingRoute(req, userConfig);
            expect(matchedRoute).toBe(undefined);
        });
        it("should return undefined when all routes don't match", () => {
            req.url = "/no-match";
            userConfig.routes = [{ route: "/foo" }, { route: "/bar'" }];
            spyDoesRequestPathMatchRoute.mockReturnValue(false);
            spyDoesRequestPathMatchLegacyRoute.mockReturnValue(false);
            const matchedRoute = routes_1.tryGetMatchingRoute(req, userConfig);
            expect(matchedRoute).toBe(undefined);
        });
    });
    describe("isRequestMethodValid()", () => {
        const testHttpMethods = ["GET", "POST", "DELETE", "PUT", "PATCH", "HEAD", "OPTIONS"];
        const req = {};
        function test(method, isFunctionRequest, isAuth, expectedValue) {
            return () => {
                req.method = method;
                const isValid = routes_1.isRequestMethodValid(req, isFunctionRequest, isAuth);
                expect(isValid).toBe(expectedValue);
            };
        }
        it("should return false when no method is provided", () => {
            const isValid = routes_1.isRequestMethodValid(req, false, false);
            expect(isValid).toBe(false);
        });
        it("should return false when method is not valid", () => {
            req.method = "FOO";
            const isValid = routes_1.isRequestMethodValid(req, false, false);
            expect(isValid).toBe(false);
        });
        describe("when request is for static", () => {
            ["GET", "HEAD", "OPTIONS"].forEach((method) => {
                it(`should return true when for valid method ${method}`, test(method, false, false, true));
            });
            ["POST", "DELETE", "PUT", "PATCH"].forEach((method) => {
                it(`should return true when for invalid method ${method}`, test(method, false, false, false));
            });
        });
        describe("when request is for Functions", () => {
            testHttpMethods.forEach((method) => {
                it(`should return true when method is ${method}`, test(method, true, false, true));
            });
        });
        describe("when request is for auth", () => {
            testHttpMethods.forEach((method) => {
                it(`should return true when method is ${method}`, test(method, false, true, true));
            });
        });
    });
});
describe("applyRedirectResponse()", () => {
    const req = {};
    const res = {
        setHeader: jest.fn(),
        end: jest.fn(),
    };
    const routeDef = {};
    beforeEach(() => {
        jest.resetAllMocks();
    });
    it("should not apply redirect header when no redirect rule is provided", () => {
        var _a;
        routes_1.applyRedirectResponse(req, res, routeDef);
        expect((_a = res.getHeader) === null || _a === void 0 ? void 0 : _a.call(res, "Location")).toBe(undefined);
    });
    it("should not change status code when no redirect rule is provided", () => {
        routes_1.applyRedirectResponse(req, res, routeDef);
        expect(res.statusCode).toBe(undefined);
    });
    it("should not change status code when no redirect rule is invalid", () => {
        routeDef.redirect = "";
        routes_1.applyRedirectResponse(req, res, routeDef);
        expect(res.statusCode).toBe(undefined);
    });
    it("should add Location header when redirect rule is provided", () => {
        routeDef.redirect = "/foo";
        routes_1.applyRedirectResponse(req, res, routeDef);
        expect(res.setHeader).toHaveBeenCalledWith("Location", routeDef.redirect);
    });
    it("should set 302 status code when redirect rule is provided with no statusCode rule", () => {
        routeDef.redirect = "/foo";
        routes_1.applyRedirectResponse(req, res, routeDef);
        expect(res.statusCode).toBe(302);
    });
    it("should set 302 status code when redirect rule is provided with statusCode 302", () => {
        routeDef.redirect = "/foo";
        routeDef.statusCode = 302;
        routes_1.applyRedirectResponse(req, res, routeDef);
        expect(res.statusCode).toBe(302);
    });
    it("should set 301 status code when redirect rule is provided with statusCode 301", () => {
        routeDef.redirect = "/foo";
        routeDef.statusCode = 301;
        routes_1.applyRedirectResponse(req, res, routeDef);
        expect(res.statusCode).toBe(301);
    });
    it("should set 302 status code when redirect rule is provided with statusCode != 301,302", () => {
        routeDef.redirect = "/foo";
        routeDef.statusCode = 200;
        routes_1.applyRedirectResponse(req, res, routeDef);
        expect(res.statusCode).toBe(302);
    });
});
//# sourceMappingURL=routes.spec.js.map