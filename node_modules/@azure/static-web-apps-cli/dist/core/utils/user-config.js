"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSWAConfigFileUrl = exports.validateUserWorkflowConfig = exports.findSWAConfigFile = exports.traverseFolder = void 0;
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const config_1 = require("../../config");
const logger_1 = require("./logger");
const net_1 = require("./net");
const { readdir, readFile } = fs_1.promises;
/**
 * A utility function to recursively traverse a folder and returns its entries.
 * @param folder The folder to traverse.
 * @returns A Generator object that yields entry paths.
 * @example
 * ```
 * for await (const file of traverseFolder(folder)) {
 *    console.log(path):
 * }
 * ```
 */
async function* traverseFolder(folder) {
    const folders = (await readdir(folder, { withFileTypes: true }));
    for (const folderEntry of folders) {
        if (folderEntry.name.includes("node_modules")) {
            // WARNING: ignore node_modules to avoid perf hits!
            continue;
        }
        const entryPath = path_1.default.resolve(folder, folderEntry.name);
        if (folderEntry.isDirectory()) {
            yield* traverseFolder(entryPath);
        }
        else {
            yield entryPath;
        }
    }
}
exports.traverseFolder = traverseFolder;
/**
 * Find the `staticwebapp.config.json` (or `routes.json`) configuration file in a specific folder.
 * @param folder The folder where to lookup for the configuration file.
 * @returns `staticwebapp.config.json` if it was found, or fallback to `routes.json`. Return `null` if none were found.
 */
async function findSWAConfigFile(folder) {
    const configFiles = new Map();
    for await (const file of traverseFolder(folder)) {
        const filename = path_1.default.basename(file);
        if (filename === config_1.DEFAULT_CONFIG.swaConfigFilename || filename === config_1.DEFAULT_CONFIG.swaConfigFilenameLegacy) {
            let config = {};
            try {
                config = JSON.parse((await readFile(file)).toString("utf-8"));
            }
            catch (err) {
                logger_1.logger.warn(``);
                logger_1.logger.warn(`Error reading ${filename} configuration:`);
                logger_1.logger.warn(`${err.message} in "${file}"`);
            }
            // make sure we are using the right SWA config file.
            // Note: some JS frameworks (eg. Nuxt, Scully) use routes.json as part of their config. We need to ignore those
            const isValidSWAConfigFile = config.globalHeaders || config.mimeTypes || config.navigationFallback || config.responseOverrides || config.routes;
            if (isValidSWAConfigFile) {
                const isLegacyConfigFile = filename === config_1.DEFAULT_CONFIG.swaConfigFilenameLegacy;
                configFiles.set(filename, { file, isLegacyConfigFile });
            }
        }
    }
    // take staticwebapp.config.json if it exists (and ignore routes.json legacy file)
    if (configFiles.has(config_1.DEFAULT_CONFIG.swaConfigFilename)) {
        return configFiles.get(config_1.DEFAULT_CONFIG.swaConfigFilename);
    }
    // fallback to legacy config file
    if (configFiles.has(config_1.DEFAULT_CONFIG.swaConfigFilenameLegacy)) {
        return configFiles.get(config_1.DEFAULT_CONFIG.swaConfigFilenameLegacy);
    }
    // no config file found
    return null;
}
exports.findSWAConfigFile = findSWAConfigFile;
/**
 * Valide and normalize all paths of a workflow confifuration.
 * @param userWorkflowConfig The project workflow configuration.
 * @returns A configuration object.
 */
function validateUserWorkflowConfig(userWorkflowConfig) {
    let appLocation = undefined;
    let apiLocation = undefined;
    let outputLocation = undefined;
    if (userWorkflowConfig === null || userWorkflowConfig === void 0 ? void 0 : userWorkflowConfig.appLocation) {
        appLocation = path_1.default.normalize(path_1.default.join(process.cwd(), userWorkflowConfig.appLocation || `.${path_1.default.sep}`));
        if (path_1.default.isAbsolute(userWorkflowConfig.appLocation)) {
            appLocation = userWorkflowConfig.appLocation;
        }
    }
    if (userWorkflowConfig === null || userWorkflowConfig === void 0 ? void 0 : userWorkflowConfig.apiLocation) {
        if (net_1.isHttpUrl(userWorkflowConfig.apiLocation)) {
            apiLocation = userWorkflowConfig.apiLocation;
        }
        else {
            // use the user's config and construct an absolute path
            apiLocation = path_1.default.normalize(path_1.default.join(process.cwd(), userWorkflowConfig.apiLocation));
        }
        if (path_1.default.isAbsolute(userWorkflowConfig.apiLocation)) {
            apiLocation = userWorkflowConfig.apiLocation;
        }
    }
    if (userWorkflowConfig === null || userWorkflowConfig === void 0 ? void 0 : userWorkflowConfig.outputLocation) {
        // is dev server url?
        if (net_1.isHttpUrl(userWorkflowConfig.outputLocation)) {
            outputLocation = userWorkflowConfig.outputLocation;
        }
        else {
            outputLocation = path_1.default.normalize(path_1.default.join(process.cwd(), userWorkflowConfig.outputLocation || `.${path_1.default.sep}`));
            if (path_1.default.isAbsolute(userWorkflowConfig.outputLocation)) {
                outputLocation = userWorkflowConfig.outputLocation;
            }
        }
    }
    return {
        appLocation,
        apiLocation,
        outputLocation,
    };
}
exports.validateUserWorkflowConfig = validateUserWorkflowConfig;
/**
 * Check if an HTTP request path contains `staticwebapp.config.json`
 * @param req Node.js HTTP request object.
 * @returns True if the request is accessing the configuration file. False otherwise.
 */
function isSWAConfigFileUrl(req) {
    var _a, _b;
    return ((_a = req.url) === null || _a === void 0 ? void 0 : _a.endsWith(`/${config_1.DEFAULT_CONFIG.swaConfigFilename}`)) || ((_b = req.url) === null || _b === void 0 ? void 0 : _b.endsWith(`/${config_1.DEFAULT_CONFIG.swaConfigFilenameLegacy}`));
}
exports.isSWAConfigFileUrl = isSWAConfigFileUrl;
//# sourceMappingURL=user-config.js.map