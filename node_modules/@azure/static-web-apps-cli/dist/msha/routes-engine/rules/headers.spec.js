"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../../../core/constants");
const headers_1 = require("./headers");
describe("getHeadersForRoute()", () => {
    // TODO: for some weird reason, jest.spyOn() does'nt mock getDefaultHeaders()
    // in this test suite, we are testing both functions: getHeadersForRoute() and getDefaultHeaders().
    it("should return default headers", async () => {
        const headers = headers_1.getHeadersForRoute(undefined, undefined);
        expect(headers).toEqual({
            "Cache-Control": "must-revalidate, max-age=30",
            ETag: `"SWA-CLI-ETAG"`,
            "Referrer-Policy": "same-origin",
            "Strict-Transport-Security": "max-age=10886400; includeSubDomains; preload",
            "X-Content-Type-Options": "nosniff",
            "X-DNS-Prefetch-Control": "off",
            "X-XSS-Protection": "1; mode=block",
        });
    });
    it("should merge route headers with default ones", async () => {
        const headers = headers_1.getHeadersForRoute({ "x-foo": "bar" }, undefined);
        expect(headers).toEqual({
            "Cache-Control": "must-revalidate, max-age=30",
            ETag: `"SWA-CLI-ETAG"`,
            "Referrer-Policy": "same-origin",
            "Strict-Transport-Security": "max-age=10886400; includeSubDomains; preload",
            "X-Content-Type-Options": "nosniff",
            "X-DNS-Prefetch-Control": "off",
            "X-XSS-Protection": "1; mode=block",
            "x-foo": "bar",
        });
    });
    it("should merge global headers with default ones", async () => {
        const headers = headers_1.getHeadersForRoute(undefined, { "x-foo": "bar" });
        expect(headers).toEqual({
            "Cache-Control": "must-revalidate, max-age=30",
            ETag: `"SWA-CLI-ETAG"`,
            "Referrer-Policy": "same-origin",
            "Strict-Transport-Security": "max-age=10886400; includeSubDomains; preload",
            "X-Content-Type-Options": "nosniff",
            "X-DNS-Prefetch-Control": "off",
            "X-XSS-Protection": "1; mode=block",
            "x-foo": "bar",
        });
    });
});
describe("getResponseHeaders()", () => {
    it("should return empty headers", () => {
        const response = headers_1.getResponseHeaders(undefined);
        expect(response).toEqual({});
    });
    it("should return found single header", () => {
        const response = headers_1.getResponseHeaders({ "x-foo": "bar" });
        expect(response).toEqual({ "x-foo": "bar" });
    });
    it("should return found multiple header", () => {
        const response = headers_1.getResponseHeaders({ "x-foo": "bar", "x-abc": "123" });
        expect(response).toEqual({ "x-foo": "bar", "x-abc": "123" });
    });
    it("should add deletion placeholder in empty headers", () => {
        const response = headers_1.getResponseHeaders({ "x-foo": "", "x-abc": "123" });
        expect(response["x-foo"]).toInclude(constants_1.HEADER_DELETE_KEYWORD);
    });
});
describe("updateResponseHeaders()", () => {
    const res = {
        setHeader: jest.fn(),
        removeHeader: jest.fn(),
    };
    it("should not mutate response object if no headers are provided", () => {
        headers_1.updateResponseHeaders(res, {});
        expect(res.removeHeader).not.toHaveBeenCalled();
        expect(res.setHeader).not.toHaveBeenCalled();
    });
    it("should set response header if a headers is provided", () => {
        headers_1.updateResponseHeaders(res, { "x-foo": "bar" });
        expect(res.setHeader).toHaveBeenCalledWith("x-foo", "bar");
    });
    it("should remove response header if a headers is provided container deletion placeholder", () => {
        headers_1.updateResponseHeaders(res, { "x-foo": `${constants_1.HEADER_DELETE_KEYWORD} bar` });
        expect(res.removeHeader).toHaveBeenCalledWith("x-foo");
    });
});
//# sourceMappingURL=headers.spec.js.map