"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const glob_1 = require("./glob");
describe("globToRegExp()", () => {
    it("glob = <empty>", () => {
        expect(glob_1.globToRegExp("")).toBe("");
    });
    it("glob = abc", () => {
        expect(glob_1.globToRegExp("abc")).toBe("abc");
    });
    it("glob = foo=bar", () => {
        expect(glob_1.globToRegExp("foo=bar")).toBe("foo=bar");
    });
    it("glob = *", () => {
        expect(glob_1.globToRegExp("*")).toBe("*");
    });
    it("glob = /*", () => {
        expect(glob_1.globToRegExp("/*")).toBe("\\/.*");
    });
    it("glob = /foo/*", () => {
        expect(glob_1.globToRegExp("/foo/*")).toBe("\\/foo\\/.*");
    });
    it("glob = /*.{ext}", () => {
        expect(glob_1.globToRegExp("/*.{ext}")).toBe("\\/.*(ext)");
    });
    it("glob = /*.{ext,gif}", () => {
        expect(glob_1.globToRegExp("/*.{ext,gif}")).toBe("\\/.*(ext|gif)");
    });
    it("glob = /foo/*.{ext,gif}", () => {
        expect(glob_1.globToRegExp("/foo/*.{ext,gif}")).toBe("\\/foo\\/.*(ext|gif)");
    });
    it("glob = {foo,bar}.json", () => {
        expect(glob_1.globToRegExp("{foo,bar}.json")).toBe("(foo|bar).json");
    });
});
// describe isValidGlobExpression
describe("isValidGlobExpression()", () => {
    // valid expressions
    ["*", "/*", "/foo/*", "/foo/*.ext", "/*.ext", "*.ext", "/foo/*.ext", "/foo/*.{ext}", "/foo/*.{ext,ext}"].forEach((glob) => {
        describe("should be TRUE for the following values", () => {
            it(`glob = ${glob}`, () => {
                expect(glob_1.isValidGlobExpression(glob)).toBe(true);
            });
        });
    });
    // invalid expressions
    [
        undefined,
        "",
        "*.*",
        "**.*",
        "**.**",
        "**",
        "*/*",
        "*/*.ext",
        "*.ext/*",
        "*/*.ext*",
        "*.ext/*.ext",
        "/blog/*/management",
        "/foo/*.{ext,,,,}",
        "/foo/*.{ext,",
        "/foo/*.ext,}",
        "/foo/*.ext}",
        "/foo/*.{}",
        "/foo/*.",
        "/foo/.",
    ].forEach((glob) => {
        describe("should be FALSE for the following values", () => {
            it(`glob = ${glob}`, () => {
                expect(glob_1.isValidGlobExpression(glob)).toBe(false);
            });
        });
    });
});
describe("isBalancedCurlyBrackets()", () => {
    it("should be true for {}", () => {
        expect(glob_1.isBalancedCurlyBrackets("{,,,}")).toBe(true);
    });
    it("should be true for {}{}{}", () => {
        expect(glob_1.isBalancedCurlyBrackets("{,,,}{,,,}{,,,}")).toBe(true);
    });
    it("should be true for {{}}", () => {
        expect(glob_1.isBalancedCurlyBrackets("{,,,{,,,},,,}")).toBe(true);
    });
    it("should be false for }{", () => {
        expect(glob_1.isBalancedCurlyBrackets("},,,{")).toBe(false);
    });
    it("should be false for }{}{", () => {
        expect(glob_1.isBalancedCurlyBrackets("},,,{,,,},,,{")).toBe(false);
    });
    it("should be false for {", () => {
        expect(glob_1.isBalancedCurlyBrackets("{,,,")).toBe(false);
    });
    it("should be false for }", () => {
        expect(glob_1.isBalancedCurlyBrackets(",,,}")).toBe(false);
    });
    it("should be false for {}}{{}", () => {
        expect(glob_1.isBalancedCurlyBrackets("{,,,}},,,{{,,,}")).toBe(false);
    });
});
//# sourceMappingURL=glob.spec.js.map