"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.responseOverrides = void 0;
const chalk_1 = __importDefault(require("chalk"));
const config_1 = require("../../../config");
const core_1 = require("../../../core");
function tryGetResponseOverrideForStatusCode(responseOverrides, statusCode) {
    return responseOverrides === null || responseOverrides === void 0 ? void 0 : responseOverrides[statusCode];
}
// See: https://docs.microsoft.com/azure/static-web-apps/configuration#response-overrides
function responseOverrides(req, res, responseOverrides) {
    var _a;
    const statusCode = res.statusCode;
    core_1.logger.silly(`checking response overrides for status code ${chalk_1.default.yellow(statusCode)}`);
    if ((_a = config_1.DEFAULT_CONFIG.overridableErrorCode) === null || _a === void 0 ? void 0 : _a.includes(statusCode)) {
        const rule = tryGetResponseOverrideForStatusCode(responseOverrides, statusCode);
        if (rule) {
            core_1.logger.silly(" - found overriden rules...");
            if (rule.statusCode) {
                res.statusCode = rule.statusCode;
                core_1.logger.silly(` - statusCode: ${chalk_1.default.yellow(statusCode)}`);
            }
            if (rule.redirect) {
                const statusCodeToServe = parseInt(`${rule === null || rule === void 0 ? void 0 : rule.statusCode}`, 10) === 301 ? 301 : 302;
                res.statusCode = statusCodeToServe;
                res.setHeader("Location", rule.redirect);
                core_1.logger.silly(` - redirect: ${chalk_1.default.yellow(rule.redirect)}`);
            }
            if (rule.rewrite && req.url !== rule.rewrite) {
                // don't process .auth or api rewrites
                if (rule.rewrite.startsWith("/.auth") || rule.rewrite.startsWith("/api")) {
                    return;
                }
                rule.rewrite = rule.rewrite.replace("/", "");
                req.url = `${config_1.DEFAULT_CONFIG.customUrlScheme}${rule.rewrite}`;
                core_1.logger.silly(` - rewrite: ${chalk_1.default.yellow(req.url)}`);
            }
        }
        else {
            core_1.logger.silly(" - no rules found.");
        }
    }
}
exports.responseOverrides = responseOverrides;
//# sourceMappingURL=response-overrides.js.map