"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFileOptions = exports.swaCliConfigFilename = void 0;
const path = __importStar(require("path"));
const fs_1 = __importStar(require("fs"));
const logger_1 = require("./logger");
const cli_1 = require("../../cli");
const { readFile } = fs_1.promises;
exports.swaCliConfigFilename = "swa-cli.config.json";
async function getFileOptions(context, configFilePath) {
    var _a;
    if (!fs_1.default.existsSync(configFilePath)) {
        return {};
    }
    const cliConfig = await tryParseSwaCliConfig(configFilePath);
    if (!cliConfig.configurations) {
        logger_1.logger.warn(`${exports.swaCliConfigFilename} is missing the "configurations" property. No options will be loaded.`);
        return {};
    }
    const hasOnlyOneConfig = Object.entries(cliConfig.configurations).length === 1;
    if (hasOnlyOneConfig && context === cli_1.defaultStartContext) {
        const [configName, config] = Object.entries(cliConfig.configurations)[0];
        printConfigMsg(configName, configFilePath);
        return { context: `.${path.sep}`, ...config };
    }
    const config = (_a = cliConfig.configurations) === null || _a === void 0 ? void 0 : _a[context];
    if (config) {
        printConfigMsg(context, configFilePath);
        return { context: `.${path.sep}`, ...config };
    }
    return {};
}
exports.getFileOptions = getFileOptions;
async function tryParseSwaCliConfig(file) {
    try {
        return JSON.parse((await readFile(file)).toString("utf-8"));
    }
    catch (e) {
        logger_1.logger.error(`Error parsing swa-cli.config.json file at ${file}`);
        if (e instanceof Error) {
            logger_1.logger.error(e);
        }
        return {};
    }
}
function printConfigMsg(name, file) {
    logger_1.logger.log(`Using configuration "${name}" from file:`, "swa");
    logger_1.logger.log(`\t${path.resolve(process.cwd(), file)}`, "swa");
    logger_1.logger.log("", "swa");
    logger_1.logger.log(`Options passed in via CLI will be overridden by options in file.`, "swa");
}
//# sourceMappingURL=cli-config.js.map