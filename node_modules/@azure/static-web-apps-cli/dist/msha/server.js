"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const open_1 = __importDefault(require("open"));
const chalk_1 = __importDefault(require("chalk"));
const fs_1 = __importDefault(require("fs"));
const http_1 = __importDefault(require("http"));
const http_proxy_1 = __importDefault(require("http-proxy"));
const https_1 = __importDefault(require("https"));
const internal_ip_1 = __importDefault(require("internal-ip"));
const core_1 = require("../core");
const constants_1 = require("../core/constants");
const function_handler_1 = require("./handlers/function.handler");
const request_middleware_1 = require("./middlewares/request.middleware");
const proxyApp = http_proxy_1.default.createProxyServer({ autoRewrite: true });
if (!core_1.isHttpUrl(constants_1.SWA_CLI_API_URI())) {
    core_1.logger.error(`The provided API URI ${constants_1.SWA_CLI_API_URI} is not a valid. Exiting.`, true);
}
// TODO: handle multiple workflow files (see #32)
if (constants_1.SWA_WORKFLOW_CONFIG_FILE) {
    core_1.logger.info(`\nFound workflow file:\n    ${chalk_1.default.green(constants_1.SWA_WORKFLOW_CONFIG_FILE)}`);
}
const httpsServerOptions = constants_1.SWA_CLI_APP_SSL
    ? {
        cert: fs_1.default.readFileSync(constants_1.SWA_CLI_APP_SSL_CERT, "utf8"),
        key: fs_1.default.readFileSync(constants_1.SWA_CLI_APP_SSL_KEY, "utf8"),
    }
    : null;
function requestHandler(userConfig) {
    return async function (req, res) {
        await request_middleware_1.requestMiddleware(req, res, proxyApp, userConfig);
    };
}
function onWsUpgrade() {
    return (req, socket, head) => {
        if (constants_1.IS_APP_DEV_SERVER()) {
            const target = constants_1.SWA_CLI_OUTPUT_LOCATION;
            const remote = `ws://${req.headers.host}`;
            core_1.logRequest(req, remote);
            proxyApp.ws(req, socket, head, {
                target,
                secure: false,
            }, request_middleware_1.onConnectionLost(req, socket, target));
            proxyApp.once("proxyRes", (proxyRes) => {
                core_1.logger.silly(`getting response from dev server`);
                core_1.logRequest(req, remote, proxyRes.statusCode);
            });
        }
    };
}
function onServerStart(server, socketConnection) {
    return () => {
        if (constants_1.IS_APP_DEV_SERVER()) {
            // prettier-ignore
            core_1.logger.log(`\nUsing dev server for static content:\n` +
                `    ${chalk_1.default.green(constants_1.SWA_CLI_OUTPUT_LOCATION)}`);
        }
        else {
            // prettier-ignore
            core_1.logger.log(`\nServing static content:\n` +
                `    ${chalk_1.default.green(constants_1.SWA_CLI_OUTPUT_LOCATION)}`);
        }
        if (constants_1.SWA_CLI_API_LOCATION) {
            if (constants_1.IS_API_DEV_SERVER()) {
                // prettier-ignore
                core_1.logger.log(`\nUsing dev server for API:\n` +
                    `    ${chalk_1.default.green(constants_1.SWA_CLI_API_LOCATION)}`);
            }
            else {
                // prettier-ignore
                core_1.logger.log(`\nServing API:\n` +
                    `    ${chalk_1.default.green(constants_1.SWA_CLI_API_LOCATION)}`);
            }
        }
        let warningMessage = `\n\nThis CLI is currently in preview and runs an emulator that may not match the \n`;
        warningMessage += `cloud environment exactly. Always deploy and test your app in Azure.\n`;
        // logger.log(`${chalk.yellowBright(warningMessage)}`);
        core_1.logger.log(warningMessage);
        // note: this string must not change. It is used by the VS Code extension.
        // see: https://github.com/Azure/static-web-apps-cli/issues/124
        //--------------------------------------------------------------------------------
        const serverAddress = core_1.address(constants_1.SWA_CLI_HOST, constants_1.SWA_CLI_PORT, constants_1.SWA_CLI_APP_PROTOCOL);
        let logMessage = `\nAzure Static Web Apps emulator started at ${chalk_1.default.green(serverAddress)}. Press CTRL+C to exit.\n\n`;
        //--------------------------------------------------------------------------------
        core_1.logger.log(logMessage);
        if (constants_1.SWA_CLI_OPEN) {
            open_1.default(serverAddress);
        }
        server.on("upgrade", onWsUpgrade());
        core_1.registerProcessExit(() => {
            socketConnection === null || socketConnection === void 0 ? void 0 : socketConnection.end(() => core_1.logger.info("WebSocket connection closed."));
            server.close(() => core_1.logger.log("Server stopped."));
            proxyApp.close(() => core_1.logger.log("App proxy stopped."));
            core_1.logger.info("Azure Static Web Apps emulator shutting down...");
            process.exit(0);
        });
    };
}
// start SWA proxy server
(async () => {
    let socketConnection;
    const localIpAdress = await internal_ip_1.default.v4();
    // load user custom rules if running in local mode (non-dev server)
    let userConfig;
    // load user configuration even when using a dev server
    userConfig = await request_middleware_1.handleUserConfig(constants_1.SWA_CLI_ROUTES_LOCATION || constants_1.SWA_CLI_APP_LOCATION);
    const createServer = () => {
        if (constants_1.SWA_CLI_APP_SSL && httpsServerOptions !== null) {
            return https_1.default.createServer(httpsServerOptions, requestHandler(userConfig));
        }
        return http_1.default.createServer(requestHandler(userConfig));
    };
    if (constants_1.IS_APP_DEV_SERVER()) {
        await core_1.validateDevServerConfig(constants_1.SWA_CLI_OUTPUT_LOCATION, constants_1.SWA_CLI_DEVSERVER_TIMEOUT);
    }
    if (constants_1.HAS_API) {
        await core_1.validateDevServerConfig(constants_1.SWA_CLI_API_URI(), constants_1.SWA_CLI_DEVSERVER_TIMEOUT);
        await function_handler_1.validateFunctionTriggers();
    }
    const server = createServer();
    server.listen(constants_1.SWA_CLI_PORT, core_1.hostnameToIpAdress(constants_1.SWA_CLI_HOST), onServerStart(server, socketConnection));
    server.listen(constants_1.SWA_CLI_PORT, localIpAdress);
})();
//# sourceMappingURL=server.js.map