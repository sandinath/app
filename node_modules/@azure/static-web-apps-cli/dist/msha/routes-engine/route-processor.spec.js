"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const route_processor_1 = require("./route-processor");
describe("parseQueryParams()", () => {
    const req = {};
    describe("with rewrite rule disabled", () => {
        it("should match /?a=1&b=2 URL", () => {
            req.url = "/?a=1&b=2";
            const matchingRouteRule = { route: "/" };
            const { matchingRewriteRoutePath, matchingRewriteRoute } = route_processor_1.parseQueryParams(req, matchingRouteRule);
            expect(matchingRewriteRoutePath).toBe("/");
            expect(matchingRewriteRoute).toBe(req.url);
        });
        it("should match /index.html?a=1&b=2 URL", () => {
            req.url = "/index.html?a=1&b=2";
            const matchingRouteRule = { route: "/" };
            const { matchingRewriteRoutePath, matchingRewriteRoute } = route_processor_1.parseQueryParams(req, matchingRouteRule);
            expect(matchingRewriteRoutePath).toBe("/index.html");
            expect(matchingRewriteRoute).toBe(req.url);
        });
        it("should match /foo/bar/index.html?a=1&b=2 URL", () => {
            req.url = "/foo/bar/index.html?a=1&b=2";
            const matchingRouteRule = { route: "/" };
            const { matchingRewriteRoutePath, matchingRewriteRoute } = route_processor_1.parseQueryParams(req, matchingRouteRule);
            expect(matchingRewriteRoutePath).toBe("/foo/bar/index.html");
            expect(matchingRewriteRoute).toBe(req.url);
        });
        it("should match /foo/bar/?a=1&b=2 URL", () => {
            req.url = "/foo/bar/?a=1&b=2";
            const matchingRouteRule = { route: "/" };
            const { matchingRewriteRoutePath, matchingRewriteRoute } = route_processor_1.parseQueryParams(req, matchingRouteRule);
            expect(matchingRewriteRoutePath).toBe("/foo/bar/");
            expect(matchingRewriteRoute).toBe(req.url);
        });
    });
    describe("with rewrite rule enabled", () => {
        it("should match /?a=1&b=2 URL", () => {
            const matchingRouteRule = { route: "/", rewrite: "/?a=1&b=2" };
            const { matchingRewriteRoutePath, matchingRewriteRoute } = route_processor_1.parseQueryParams(req, matchingRouteRule);
            expect(matchingRewriteRoutePath).toBe("/");
            expect(matchingRewriteRoute).toBe(matchingRouteRule.rewrite);
        });
        it("should match /index.html?a=1&b=2 URL", () => {
            const matchingRouteRule = { route: "/", rewrite: "/index.html?a=1&b=2" };
            const { matchingRewriteRoutePath, matchingRewriteRoute } = route_processor_1.parseQueryParams(req, matchingRouteRule);
            expect(matchingRewriteRoutePath).toBe("/index.html");
            expect(matchingRewriteRoute).toBe(matchingRouteRule.rewrite);
        });
        it("should match /foo/bar/index.html?a=1&b=2 URL", () => {
            const matchingRouteRule = { route: "/", rewrite: "/foo/bar/index.html?a=1&b=2" };
            const { matchingRewriteRoutePath, matchingRewriteRoute } = route_processor_1.parseQueryParams(req, matchingRouteRule);
            expect(matchingRewriteRoutePath).toBe("/foo/bar/index.html");
            expect(matchingRewriteRoute).toBe(matchingRouteRule.rewrite);
        });
        it("should match /foo/bar/?a=1&b=2 URL", () => {
            const matchingRouteRule = { route: "/", rewrite: "/foo/bar/?a=1&b=2" };
            const { matchingRewriteRoutePath, matchingRewriteRoute } = route_processor_1.parseQueryParams(req, matchingRouteRule);
            expect(matchingRewriteRoutePath).toBe("/foo/bar/");
            expect(matchingRewriteRoute).toBe(matchingRouteRule.rewrite);
        });
    });
});
//# sourceMappingURL=route-processor.spec.js.map