"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.defaultStartContext = void 0;
const commander_1 = __importStar(require("commander"));
const path_1 = __importDefault(require("path"));
const config_1 = require("../config");
const core_1 = require("../core");
const core_2 = require("../core");
const start_1 = require("./commands/start");
const update_notifier_1 = __importDefault(require("update-notifier"));
const cli_config_1 = require("../core/utils/cli-config");
const pkg = require("../../package.json");
exports.defaultStartContext = `.${path_1.default.sep}`;
async function run(argv) {
    // Once a day, check for updates
    update_notifier_1.default({ pkg }).notify();
    const cli = commander_1.default
        .name("swa")
        .usage("<command> [options]")
        .version(pkg.version, "-v, --version")
        // SWA config
        .option("--verbose [prefix]", "enable verbose output. Values are: silly,info,log,silent", config_1.DEFAULT_CONFIG.verbose)
        .addHelpText("after", "\nDocumentation:\n  https://aka.ms/swa/cli-local-development\n")
        .option("--config <path>", "Path to swa-cli.config.json file to use.", path_1.default.relative(process.cwd(), cli_config_1.swaCliConfigFilename))
        .option("--print-config", "Print all resolved options.", false);
    commander_1.default
        .command("start [context]")
        .usage("[context] [options]")
        .description("start the emulator from a directory or bind to a dev server")
        .option("--app-location <appLocation>", "set location for the static app source code", config_1.DEFAULT_CONFIG.appLocation)
        .option("--api-location <apiLocation>", "set the API folder or Azure Functions emulator address", config_1.DEFAULT_CONFIG.apiLocation)
        .option("--swa-config-location <swaConfigLocation>", "set the directory where the staticwebapp.config.json file is located", config_1.DEFAULT_CONFIG.swaConfigLocation)
        // CLI config
        .option("--api-port <apiPort>", "set the API backend port", core_1.parsePort, config_1.DEFAULT_CONFIG.apiPort)
        .option("--host <host>", "set the cli host address", config_1.DEFAULT_CONFIG.host)
        .option("--port <port>", "set the cli port", core_1.parsePort, config_1.DEFAULT_CONFIG.port)
        // hide this flag from the help output
        .addOption(new commander_1.Option("--build", "build the app and API before starting the emulator").default(false).hideHelp())
        .option("--ssl", "serve the app and API over HTTPS", config_1.DEFAULT_CONFIG.ssl)
        .option("--ssl-cert <sslCertLocation>", "SSL certificate (.crt) to use for serving HTTPS", config_1.DEFAULT_CONFIG.sslCert)
        .option("--ssl-key <sslKeyLocation>", "SSL key (.key) to use for serving HTTPS", config_1.DEFAULT_CONFIG.sslKey)
        .option("--run <startupScript>", "run a command at startup", config_1.DEFAULT_CONFIG.run)
        .option("--devserver-timeout <devserverTimeout>", "time to wait (in ms) for the dev server to start", core_2.parseDevserverTimeout, config_1.DEFAULT_CONFIG.devserverTimeout)
        .option("--open", "open the browser to the dev server", config_1.DEFAULT_CONFIG.open)
        .option("--func-args <funcArgs>", "pass additional arguments to the func start command")
        .action(async (context = `.${path_1.default.sep}`, options) => {
        var _a;
        const verbose = cli.opts().verbose;
        // make sure the start command gets the right verbosity level
        process.env.SWA_CLI_DEBUG = verbose;
        if (verbose === null || verbose === void 0 ? void 0 : verbose.includes("silly")) {
            // when silly level is set,
            // propagate debugging level to other tools using the DEBUG environment variable
            process.env.DEBUG = "*";
        }
        const fileOptions = await cli_config_1.getFileOptions(context, cli.opts().config);
        options = {
            ...options,
            ...fileOptions,
            verbose,
        };
        if (cli.opts().printConfig) {
            core_1.logger.log("", "swa");
            core_1.logger.log("Options: ", "swa");
            core_1.logger.log({ ...config_1.DEFAULT_CONFIG, ...options }, "swa");
        }
        await start_1.start((_a = fileOptions.context) !== null && _a !== void 0 ? _a : context, options);
    })
        .addHelpText("after", `
Examples:

  Serve static content from a specific folder
  swa start ./output-folder

  Use an already running framework development server
  swa start http://localhost:3000

  Use staticwebapp.config.json file in a specific location
  swa start http://localhost:3000 --swa-config-location ./app-source

  Serve static content and run an API from another folder
  swa start ./output-folder --api-location ./api

  Use a custom command to run framework development server at startup
  swa start http://localhost:3000 --run "npm start"
    `);
    await commander_1.default.parseAsync(argv);
}
exports.run = run;
//# sourceMappingURL=index.js.map