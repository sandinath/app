"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mock_fs_1 = __importDefault(require("mock-fs"));
const cli_1 = require("../../cli");
const cli_config_1 = require("./cli-config");
const mockConfig1 = {
    $schema: "../../../schema/swa-cli.config.schema.json",
    configurations: {
        app: {
            context: "./cypress/fixtures/static",
            apiLocation: "./cypress/fixtures/api",
            port: 1111,
            devServerTimeout: 10000,
            verbose: "silly",
        },
        app2: {
            context: "./cypress/fixtures/static",
            apiLocation: "./cypress/fixtures/api",
            port: 2222,
            devServerTimeout: 10000,
            verbose: "silly",
        },
    },
};
const mockConfig2 = {
    $schema: "../../../schema/swa-cli.config.schema.json",
    configurations: {
        app: {
            context: "./cypress/fixtures/static",
            apiLocation: "./cypress/fixtures/api",
            port: 3333,
            devServerTimeout: 10000,
            verbose: "silly",
        },
    },
};
describe("getFileOptions()", () => {
    afterEach(() => {
        mock_fs_1.default.restore();
    });
    const mockConfig = (config = mockConfig1) => {
        mock_fs_1.default({
            "swa-cli.config.json": JSON.stringify(config),
        });
    };
    mock_fs_1.default({
        "swa-cli.config.json": ``,
    });
    it("Should return empty object if not found", async () => {
        mockConfig();
        expect(await cli_config_1.getFileOptions("app", "")).toStrictEqual({});
    });
    it("Should return empty object if config name is not found", async () => {
        mockConfig();
        expect(await cli_config_1.getFileOptions("configName", "swa-cli.config.json")).toStrictEqual({});
    });
    it("Should return proper config options", async () => {
        mockConfig();
        expect(await cli_config_1.getFileOptions("app", "swa-cli.config.json")).toStrictEqual(mockConfig1.configurations.app);
    });
    it("Should only return a default config if there is only one config", async () => {
        mockConfig();
        expect(await cli_config_1.getFileOptions(cli_1.defaultStartContext, "swa-cli.config.json")).toStrictEqual({});
    });
    it("Should return a default config", async () => {
        mockConfig(mockConfig2);
        expect(await cli_config_1.getFileOptions(cli_1.defaultStartContext, "swa-cli.config.json")).toStrictEqual(mockConfig2.configurations.app);
    });
    it("Should return empty object if config file is not found", async () => {
        expect(await cli_config_1.getFileOptions(cli_1.defaultStartContext, "swa-cli.config.json")).toStrictEqual({});
    });
    it("Should return proper config without path specified", async () => {
        mockConfig(mockConfig1);
        expect(await cli_config_1.getFileOptions("app", "swa-cli.config.json")).toStrictEqual(mockConfig1.configurations.app);
    });
});
//# sourceMappingURL=cli-config.spec.js.map